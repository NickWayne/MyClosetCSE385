using System;
using System.Collections.Generic;
using System.Data;
using System.Web.Services;


/// <summary>
///		Sample application to demonstrate a C# API
/// </summary>
[WebService(Namespace = "http://tempuri.org/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
// [System.Web.Script.Services.ScriptService]
public class MyGuitarShopAPI : System.Web.Services.WebService {

	#region ######################################################################################################################################################## Notes
	    /*	Dynamic object Example ...
		    List<Dictionary<string, object>> rows = new List<Dictionary<string, object>>();
		    Dictionary<string, object> row = new Dictionary<string, object>();
		    row.Add("Make", "G35");
		    row.Add("Model", "25 -18 Turbo");
		    row.Add("Year", 2014);
		    rows.Add(row);

		    row = new Dictionary<string, object>();
		    row.Add("Make", "Honda");
		    row.Add("Model", "Accord");
		    row.Add("Year", 2015);
		    rows.Add(row);

		    serialize(rows);
	    */
	#endregion

	#region ######################################################################################################################################################## Wrapper Methods [DON'T MODIFY]

		// Database
		private void addParam(string name, object value)						{	Helper.addParam(name, value);							}
		private DataSet sqlExecDataSet(string sql)								{	return Helper.sqlExecDataSet(sql);						}
		private DataTable sqlExecDataTable(string sql)							{	return Helper.sqlExecDataTable(sql);					}
		private DataTable sqlExec(string sql)									{	return Helper.sqlExec(sql);								}
		private DataTable sqlExec(string sql, DataTable dt, string udtblParam)	{	return Helper.sqlExec(sql, dt, udtblParam);				}
		private DataTable sqlExecQuery(string sql)								{	return Helper.sqlExecQuery(sql);						}

		// Serializer
		private void streamJson(string jsonString)								{	Helper.streamJson(jsonString);							}
		private void serialize(Object obj)										{	Helper.serialize(obj);									}
		private void serializeSingleDataTableRow(DataTable dt)					{	Helper.serializeSingleDataTableRow(dt);					}
		private void serializeDataTable(DataTable dt)							{	Helper.serializeDataTable(dt);							}
		private void serializeDataSet(DataSet ds)								{	Helper.serializeDataSet(ds);							}
		private void serializeXML<T>(T value)									{	Helper.serializeXML(value);								}
		private void serializeDictionary(Dictionary<object, object> dic)		{	Helper.serializeDictionary(dic);						}
		private void serializeObject(Object obj)								{	Helper.serializeObject(obj);							}

		// Going to leave this out so we don't need to import Newtonsoft.Json package
		//private T _download_serialized_json_data<T>(string url) where T : new()	{	return Helper._download_serialized_json_data<T>(url);	}

	#endregion


	//=== Web Service Methods Follow Below
    [WebMethod(Description = "Local creation of a query to database.")]
    public void getCustomersByFilter(int count, string filter) {

		/*
		 *
			Note: You may need to add this Stored Procedure to SQL Server:

			-----------------------------------------------------------------------------------------------------------------------------

			CREATE PROCEDURE [dbo].[spGetCustomersByFilter]
				@filter varchar(50),
				@count int
			AS

				if(@count = 0) SELECT @count = COUNT(*) FROM Customers
				SELECT TOP(@count) * FROM Customers WHERE (EmailAddress + '_' + FirstName + '_' + LastName) LIKE '%' + @filter + '%'
		
			-----------------------------------------------------------------------------------------------------------------------------

 		*
		*/



		/*	Version 1: Not a good method. Try entering in:  ' OR 1=1 --  as the email*/
		// serializeDataTable(sqlExecQuery("SELECT * FROM Customers WHERE (EmailAddress + '_' + FirstName + '_' + LastName) LIKE '%" + filter  + "'"));

		/*	Version 2: Much better means of security	*/
		filter = filter.Trim();
		addParam("@filter", filter);
		addParam("@count", count);
        serializeDataTable(sqlExec("spGetCustomersByFilter"));
    }


	[WebMethod(Description = "TEST API CALL FOR JQUERY CONSUMPTION - max retun count = 30, filter by make, model or year.  Set count=0 and filter = \"\" for random cars<br /><br />possible makes: Honda, Toyota, BMW, Ford<br />possible models: Truck, Sport, Hatchback, Coupe, Sedan, SU, MiniVan<br />possible years: 2000-2018")]
	public void Cars(int count, string filter) {
		List<Dictionary<string, object>> rows = new List<Dictionary<string, object>>();
		Dictionary<string, object> row;

		// Set up random cars and add them to the list to return to user. If a filter is added
		// just add cars that fit into the filter
		string[] makes = { "Honda", "Toyota", "BMW", "Ford" };
		string[] models = { "Truck", "Sport", "Hatchback", "Coupe", "Sedan", "SUV", "MiniVan" };
		Random rnd = new Random();
		int attempt = 0;
		int maxRows = 30;
		int num = (count <= 0 ? maxRows : Math.Min(count, maxRows));
		filter = filter.Trim();
		while (true) {
			row = new Dictionary<string, object>();
			row.Add("Make", makes[rnd.Next(makes.Length)]);
			row.Add("Model", models[rnd.Next(models.Length)]);
			row.Add("Year", rnd.Next(19) + 2000);

			// Note: The code line: String.Join("-",row) would produce a string that looks like:
			//
			//		[Make, Honda]-[Model, SUV]-[Year, 2010]

			if (filter.Length == 0 ||  String.Join("-",row).ToLower().Contains(" " + filter.ToLower() + "]")) { 
				rows.Add(row);
			}
			if (rows.Count == num || ++attempt > 1000) break;
		}

		serialize(rows);
	}

}
